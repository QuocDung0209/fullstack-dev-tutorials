/* eslint-disable no-useless-escape */
import { Component } from '@angular/core';

@Component({
  selector: 'app-create-project',
  templateUrl: './create-project.component.html',
  styleUrls: ['./create-project.component.scss'],
})
export class CreateProjectComponent {
  eslintrc = `{\n  \"env\": {\n    \"browser\": true,\n    \"es6\": true\n  },\n  \"extends\": [\"react-app\", \"prettier\"],\n  \"plugins\": [\"react\", \"prettier\"],\n  \"parserOptions\": {\n    \"ecmaVersion\": 2018\n  },\n  \"rules\": {\n    \"prettier/prettier\": [\n      \"warn\",\n      {\n        \"arrowParens\": \"avoid\",\n        \"semi\": true, // If you want to print semicolons at the end of every statement, false otherwise.\n        \"trailingComma\": \"es5\",\n        \"endOfLine\": \"lf\",\n        \"tabWidth\": 2,\n        \"printWidth\": 80,\n        \"useTabs\": false,\n        \"no-mixed-spaces-and-tabs\": [\"error\", \"smart-tabs\"]\n      }\n    ],\n    \"no-unused-vars\": [\n      \"error\",\n      { \"vars\": \"all\", \"args\": \"after-used\", \"ignoreRestSiblings\": false }\n    ],\n    \"no-console\": \"warn\"\n  }\n}`;
  eslintignore = `/src/serviceWorker.ts\n/src/setupTests.ts\n/src/reportWebVitals.ts`;
  prettierrc = `{\n  \"arrowParens\": \"avoid\",\n  \"semi\": true,\n  \"trailingComma\": \"none\",\n  \"endOfLine\": \"lf\",\n  \"tabWidth\": 2,\n  \"printWidth\": 80,\n  \"useTabs\": false\n}`;
  prettierignore = `.cache\npackage-lock.json`;

  packageJson = `\"scripts\": {\n    \"start\": \"webpack serve --mode development\",\n    \"build\": \"webpack --mode production\",\n    \"build:analyze\": \"webpack --mode production --env analyze\",\n    \"lint\": \"eslint --ext js,jsx,ts,tsx src/\",\n    \"lint:fix\": \"eslint --fix --ext js,jsx,ts,tsx src/\",\n    \"prettier\": \"prettier --check \\\"src/**/(*.tsx|*.ts|*.jsx|*.js|*.scss|*.css)\\\"\",\n    \"prettier:fix\": \"prettier --write \\\"src/**/(*.tsx|*.ts|*.jsx|*.js|*.scss|*.css)\\\"\"\n  },`;
  tsconfig = `{\n  \"compilerOptions\": {\n    \"target\": \"ES5\",\n    \"allowJs\": true,\n    \"strict\": true,\n    \"module\": \"ESNext\",\n    \"moduleResolution\": \"node\",\n    \"noImplicitAny\": false,\n    \"sourceMap\": true,\n    \"jsx\": \"react\",\n    \"allowSyntheticDefaultImports\": true,\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"@/*\": [\"src/*\"],\n      \"@@/*\": [\"./*\"]\n    }\n  },\n  \"include\": [\"src/**/*\"],\n  \"exclude\": [\"node_modules\"]\n}`;
  webpackConfig = `const path = require(\"path\");\nconst webpack = require(\"webpack\");\nconst HtmlWebpackPlugin = require(\"html-webpack-plugin\");\nconst CopyPlugin = require(\"copy-webpack-plugin\");\nconst Dotenv = require(\"dotenv-webpack\");\nconst MiniCssExtractPlugin = require(\"mini-css-extract-plugin\");\nconst { CleanWebpackPlugin } = require(\"clean-webpack-plugin\");\nconst CompressionPlugin = require(\"compression-webpack-plugin\");\nconst BundleAnalyzerPlugin =\n  require(\"webpack-bundle-analyzer\").BundleAnalyzerPlugin;\n\nmodule.exports = (env, agrv) => {\n  const isDev = agrv.mode === \"development\";\n  const isAnalyze = env && env.analyze;\n  const basePlugins = [\n    new Dotenv(),\n    new HtmlWebpackPlugin({\n      template: \"public/index.html\",\n    }),\n    new CopyPlugin({\n      patterns: [\n        {\n          from: \"**/*\",\n          globOptions: {\n            ignore: [\"**/index.html\"],\n          },\n          to: \"\",\n          context: path.resolve(\"public\"),\n        },\n      ],\n    }),\n    new MiniCssExtractPlugin({\n      filename: isDev ? \"[name].css\" : \"static/css/[name].[contenthash:6].css\",\n    }),\n    new webpack.ProgressPlugin(),\n  ];\n  let prodPlugins = [\n    ...basePlugins,\n    new CleanWebpackPlugin(),\n    new CompressionPlugin({\n      test: /\\.(css|js|html|svg)$/,\n    }),\n  ];\n  if (isAnalyze) {\n    prodPlugins = [...prodPlugins, new BundleAnalyzerPlugin()];\n  }\n\n  return {\n    entry: \"./src/index.tsx\",\n    module: {\n      rules: [\n        {\n          test: /\\.(ts|tsx)$/,\n          use: [\"ts-loader\", \"eslint-loader\"],\n          exclude: /node_modules/,\n        },\n        {\n          test: /\\.(s[ac]ss|css)$/,\n          use: [\n            MiniCssExtractPlugin.loader,\n            {\n              loader: \"css-loader\",\n              options: { sourceMap: isDev ? true : false },\n            },\n            {\n              loader: \"sass-loader\",\n              options: { sourceMap: isDev ? true : false },\n            },\n          ],\n        },\n        {\n          test: /\\.(eot|ttf|woff|woff2)$/,\n          use: [\n            {\n              loader: \"file-loader\",\n              options: {\n                name: isDev\n                  ? \"[path][name].[ext]\"\n                  : \"static/fonts/[name].[ext]\",\n              },\n            },\n          ],\n        },\n        {\n          test: /\\.(png|svg|jpg|gif)$/,\n          use: [\n            {\n              loader: \"file-loader\",\n              options: {\n                name: isDev\n                  ? \"[path][name].[ext]\"\n                  : \"static/media/[name].[contenthash:6].[ext]\",\n              },\n            },\n          ],\n        },\n      ],\n    },\n    resolve: {\n      extensions: [\".tsx\", \".ts\", \".jsx\", \".js\"],\n      alias: {\n        \"@\": path.resolve(\"src\"),\n        \"@@\": path.resolve(),\n      },\n    },\n    output: {\n      path: path.resolve(\"build\"),\n      publicPath: \"/\",\n      filename: \"static/js/main.[contenthash:6].js\",\n      environment: {\n        arrowFunction: false,\n        bigIntLiteral: false,\n        const: false,\n        destructuring: false,\n        dynamicImport: false,\n        forOf: false,\n        module: false,\n      },\n    },\n    devtool: isDev ? \"source-map\" : false,\n    devServer: {\n      contentBase: \"public\",\n      port: 3000,\n      hot: true,\n      watchContentBase: true,\n      historyApiFallback: true,\n      open: true,\n    },\n    plugins: isDev ? basePlugins : prodPlugins,\n    performance: {\n      maxEntrypointSize: 800000, //  Khi có 1 file build vượt quá giới hạn này (tính bằng byte) thì sẽ bị warning trên terminal.\n    },\n  };\n};`;

  index = `<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <link rel=\"icon\" href=\"./favicon.ico\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <meta name=\"theme-color\" content=\"#000000\" />\n    <meta\n      name=\"description\"\n      content=\"Web site created using create-react-app\"\n    />\n    <link rel=\"apple-touch-icon\" href=\"./logo192.png\" />\n    <!--\n      manifest.json provides metadata used when your web app is installed on a\n      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/\n    -->\n    <link rel=\"manifest\" href=\"./manifest.json\" />\n    <!--\n      Notice the use of %PUBLIC_URL% in the tags above.\n      It will be replaced with the URL of the 'public' folder during the build.\n      Only files inside the 'public' folder can be referenced from the HTML.\n\n      Unlike \"/favicon.ico\" or \"favicon.ico\", \"%PUBLIC_URL%/favicon.ico\" will\n      work correctly both with client-side routing and a non-root public URL.\n      Learn how to configure a non-root public URL by running 'npm run build'.\n    -->\n    <title>React App</title>\n  </head>\n  <body>\n    <noscript>You need to enable JavaScript to run this app.</noscript>\n    <div id=\"root\"></div>\n    <!--\n      This HTML file is a template.\n      If you open it directly in the browser, you will see an empty page.\n\n      You can add webfonts, meta tags, or analytics to this file.\n      The build step will place the bundled scripts into the <body> tag.\n\n      To begin the development, run 'npm start' or 'yarn start'.\n      To create a production bundle, use 'npm run build' or 'yarn build'.\n    -->\n  </body>\n</html>`;
  manifest = `{\n  \"short_name\": \"React App\",\n  \"name\": \"Create React App Sample\",\n  \"icons\": [\n    {\n      \"src\": \"favicon.ico\",\n      \"sizes\": \"64x64 32x32 24x24 16x16\",\n      \"type\": \"image/x-icon\"\n    },\n    {\n      \"src\": \"logo192.png\",\n      \"type\": \"image/png\",\n      \"sizes\": \"192x192\"\n    },\n    {\n      \"src\": \"logo512.png\",\n      \"type\": \"image/png\",\n      \"sizes\": \"512x512\"\n    }\n  ],\n  \"start_url\": \".\",\n  \"display\": \"standalone\",\n  \"theme_color\": \"#000000\",\n  \"background_color\": \"#ffffff\"\n}`;
  robots = `# https://www.robotstxt.org/robotstxt.html\nUser-agent: *\nDisallow:`;

  env = `EXTEND_ESLINT=true`;
  editorconfig = `# Editor configuration, see https://editorconfig.org\nroot = true\n\n[*]\ncharset = utf-8\nindent_style = space\nindent_size = 2\ninsert_final_newline = true\ntrim_trailing_whitespace = true\n\n[*.ts]\nquote_type = single\n\n[*.md]\nmax_line_length = off\ntrim_trailing_whitespace = false`;
  setupTests = `// jest-dom adds custom jest matchers for asserting on DOM nodes.\n// allows you to do things like:\n// expect(element).toHaveTextContent(/react/i)\n// learn more: https://github.com/testing-library/jest-dom\n\nimport \"@testing-library/jest-dom/extend-expect\";`;
  serviceWorker = `// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL((process.env.PUBLIC_URL as string), window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = 'process.env.PUBLIC_URL' + '/service-worker.js'\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\")\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\")\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      )\n    })\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister()\n      })\n      .catch(error => {\n        console.error(error.message)\n      })\n  }\n}`;
  reportWebVitals = `const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;`;
  indexTsx = `import * as serviceWorker from \"./serviceWorker\";\n\nimport App from \"./App/App\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\n// import reportWebVitals from \"./reportWebVitals\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();`;
  appTsx = `import React from \"react\";\nimport logo from \"../../public/logo192.png\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;`;
}
